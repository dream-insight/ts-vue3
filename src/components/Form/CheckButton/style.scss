@import '../../common.scss';

.check-button {
  .origin-check-button {
    display: inline-block;

    &.block {
      display: block !important;
    }

    &:not(&.block) + .origin-check-button {
      margin-left: 10px;
    }

    label {
      display: flex;
      align-items: center;
      font-size: 13px;
      font-weight: 400;

      input {
        position: absolute;
        clip: rect(0, 0, 0, 0);
      }

      i {
        font-size: 24px;
        margin-right: 3px;
        color: $gray-400;
      }

      &:hover {
        i {
          color: $gray-600;
        }
      }

      &:has(input:disabled) {
        color: $gray-400;
      }

      input:disabled + i {
        color: $gray-300;
      }

      @each $color in $colors {
        &.#{$color} {
          input:checked + i {
            color: map-get($theme-colors, $color);
          }

          input:checked:disabled + i {
            color: lighten(map-get($theme-colors, $color), 25);
          }
        }
      }
    }
  }

  span {
    color: #5b5b5b;
    font-size: 14px;
  }

  label {
    font-size: 1em;
    font-weight: 400;
  }

  .check-button-group {
    display: inline-block;
    position: relative;
    overflow: hidden;
    // border-radius: 5px;
    box-shadow: $box-shadow;

    @each $color in $colors {
      &.#{$color} {
        border: 1px solid map-get($theme-colors, $color);

        label {
          border-right: 1px solid lighten(map-get($theme-colors, $color), 10);
          color: map-get($theme-colors, $color);

          &:hover {
            background-color: lighten(map-get($theme-colors, $color), 40);
          }
        }

        input:checked + label {
          background-color: map-get($theme-colors, $color);
        }

        &.disabled {
          border: 1px solid lighten(map-get($theme-colors, $color), 25);

          label {
            border-right: 1px solid lighten(map-get($theme-colors, $color), 35);
            color: lighten(map-get($theme-colors, $color), 25);

            &:hover {
              background-color: transparent;
            }
          }

          input:checked + label {
            color: $white;
            background-color: lighten(map-get($theme-colors, $color), 25);
          }
        }
      }
    }

    input {
      position: absolute;
      clip: rect(0, 0, 0, 0);
    }

    label {
      font-size: 0.9em;
      display: inline-block;
      padding: 0 17px;
      height: 35px;
      line-height: 35px;
      font-weight: 500;
      transition: all 0.2s ease;

      &.last {
        border-right: 0 !important;
      }
    }

    input:checked + label {
      color: #fff;
    }
  }

  .description {
    font-size: 0.875em !important;
    font-weight: normal;
    padding: 0 !important;
    margin-bottom: 0 !important;
    border: 0 !important;
    color: map-get($theme-colors, 'danger');
    text-align: left !important;

    &.error {
      animation: shaking 0.3s;
    }
  }

  .check-scale-enter-from,
  .check-scale-leave-to {
    opacity: 0;
    transform: scale(0);
  }
  .check-scale-enter-active,
  .check-scale-leave-active {
    transition: all 0.1s ease;
  }
}